{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false"
   },
   "source": [
    "# Building an Organizations Collaboration Network using the Dimensions API. \n",
    "\n",
    "This notebook shows how to analyse organizations collaboration data. Starting from a research organization, we will extract information about other organizations that collaborated with it, based on shared publications data. \n",
    "\n",
    "In order to make the analysis more focused, we are going to select also a topic and a time-frame. By appying these extra constraints we will reduce the number of shared publications data and also make the overall extraction faster. \n",
    "\n",
    "At the end of the tutorial we will generate a 'collaborations network diagram', in which the nodes represent the organizations working together, and the edges represent the number of publications they have in common. An example of the resulting network diagram [can be seen here](http://api-sample-data.dimensions.ai/dataviz-exports/3-Organizations-Collaboration-Network/network_2_levels_grid.412125.1.html)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false",
    "colab_type": "text",
    "id": "hWgUrUXmFbWt"
   },
   "source": [
    "## 1. Prerequisites: load libraries and log in"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "Collapsed": "false"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DimCli v0.6.3 - Succesfully connected to <https://app.dimensions.ai> (method: dsl.ini file)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "        <script type=\"text/javascript\">\n",
       "        window.PlotlyConfig = {MathJaxConfig: 'local'};\n",
       "        if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\n",
       "        if (typeof require !== 'undefined') {\n",
       "        require.undef(\"plotly\");\n",
       "        requirejs.config({\n",
       "            paths: {\n",
       "                'plotly': ['https://cdn.plot.ly/plotly-latest.min']\n",
       "            }\n",
       "        });\n",
       "        require(['plotly'], function(Plotly) {\n",
       "            window._Plotly = Plotly;\n",
       "        });\n",
       "        }\n",
       "        </script>\n",
       "        "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# @markdown # Get the API library and login \n",
    "# @markdown Click the 'play' button on the left (or shift+enter) after entering your API credentials\n",
    "\n",
    "username = \"\" #@param {type: \"string\"}\n",
    "password = \"\" #@param {type: \"string\"}\n",
    "endpoint = \"https://app.dimensions.ai\" #@param {type: \"string\"}\n",
    "\n",
    "\n",
    "!pip install dimcli plotly tqdm pyvis -U --quiet \n",
    "import dimcli\n",
    "from dimcli.shortcuts import *\n",
    "dimcli.login(username, password, endpoint)\n",
    "dsl = dimcli.Dsl()\n",
    "\n",
    "#\n",
    "# load common libraries\n",
    "import time\n",
    "import sys\n",
    "import json\n",
    "import pandas as pd\n",
    "from pandas.io.json import json_normalize\n",
    "from tqdm.notebook import tqdm as progress\n",
    "import networkx as nx\n",
    "\n",
    "#\n",
    "# charts libs\n",
    "# import plotly_express as px\n",
    "import plotly.express as px\n",
    "if not 'google.colab' in sys.modules:\n",
    "  # make js dependecies local / needed by html exports \n",
    "  from plotly.offline import init_notebook_mode\n",
    "  init_notebook_mode(connected=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false",
    "colab_type": "text",
    "id": "duzLFSrfFiuS"
   },
   "source": [
    "## 2. Choose an Organization and a keyword (topic)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false",
    "colab_type": "text",
    "id": "L6uIjSVnGRQV"
   },
   "source": [
    "For the purpose of this exercise, we will use [grid.412125.1](https://grid.ac/institutes/grid.412125.1) (King Abdulaziz University, Saudi Arabia). \n",
    "\n",
    "> You can try using a different GRID ID to see how results change, e.g. by [browsing for another GRID organization](https://grid.ac/institutes).\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "Collapsed": "false"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "GRID: <a href=\"https://app.dimensions.ai/discover/publication?and_facet_research_org=grid.412125.1\" title=\"View selected organization in Dimensions\">grid.412125.1 - King Abdulaziz University &#x29c9;</a>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "Time period: 2000 to 2016"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "Topic: \"nanotechnology\" <br /><br />"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "GRIDID = \"grid.412125.1\" #@param {type:\"string\"}\n",
    "    \n",
    "#@markdown The start/end year of publications used to extract patents\n",
    "YEAR_START = 2000 #@param {type: \"slider\", min: 1950, max: 2020}\n",
    "YEAR_END = 2016 #@param {type: \"slider\", min: 1950, max: 2020}\n",
    "\n",
    "#@markdown ---\n",
    "#@markdown A keyword used to filter publications search\n",
    "TOPIC = \"nanotechnology\" #@param {type:\"string\"}\n",
    "\n",
    "if YEAR_END < YEAR_START:\n",
    "  YEAR_END = YEAR_START\n",
    "\n",
    "#\n",
    "# gen link to Dimensions\n",
    "#\n",
    "try:\n",
    "  gridname = dsl.query(f\"\"\"search organizations where id=\"{GRIDID}\" return organizations[name]\"\"\", verbose=False).organizations[0]['name']\n",
    "except:\n",
    "  gridname = \"\"\n",
    "from IPython.core.display import display, HTML\n",
    "display(HTML('GRID: <a href=\"{}\" title=\"View selected organization in Dimensions\">{} - {} &#x29c9;</a>'.format(dimensions_url(GRIDID), GRIDID, gridname)))\n",
    "display(HTML('Time period: {} to {}'.format(YEAR_START, YEAR_END)))\n",
    "display(HTML('Topic: \"{}\" <br /><br />'.format(TOPIC)))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false"
   },
   "source": [
    "## 3. Building a one-degree network of collaborating institutions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false"
   },
   "source": [
    "We can use the [publications API](https://docs.dimensions.ai/dsl/data-sources.html#publications) to find the top 10 collaborating institutions based on the parameters above, via a single query. \n",
    "\n",
    "The `get_collaborators` function below fills out a templated query with the relevant bits and runs it. Then it transforms the results into a pandas dataframe, which will make it easier to process the data later on. \n",
    "\n",
    "A couple of things to note: \n",
    "\n",
    "* The resulting dataframe contains two extra columns: a) `id_from`, which is the 'seed' institution we start from; b) `level`, an optional parameter representing the network depth of the query (we'll see later how it is used with recursive querying).\n",
    "* The query returns 11 records - that's because the first one is normally the seed GRID (due to internal collaborations) which we will omit from the results.\n",
    "* Lastly, it's important to note that one could easily more constraints to the query e.g. research areas via FOR codes, or setting a threshold based on citation counts. The possibilities are endless!  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "Collapsed": "false"
   },
   "outputs": [],
   "source": [
    "query = \"\"\"search publications {}\n",
    "               where year in [{}:{}] \n",
    "               and research_orgs.id=\"{}\"\n",
    "            return research_orgs limit 11\"\"\"\n",
    "\n",
    "def get_collaborators(orgid, level=1, printquery=False):\n",
    "    if TOPIC:\n",
    "        TOPIC_CLAUSE = f\"\"\"for \"{TOPIC}\" \"\"\"\n",
    "    else:\n",
    "        TOPIC_CLAUSE = \"\"\n",
    "    searchstring = query.format(TOPIC_CLAUSE, YEAR_START, YEAR_END, orgid)\n",
    "    if printquery: print(searchstring)\n",
    "    df = dsl.query(searchstring, verbose=False).as_dataframe()\n",
    "    df['id_from'] = [orgid] * len(df)\n",
    "    df['level'] = [level] * len(df)\n",
    "    return df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false"
   },
   "source": [
    "For example, let's try it out with our GRID ID:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "Collapsed": "false"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "search publications for \"nanotechnology\" \n",
      "               where year in [2000:2016] \n",
      "               and research_orgs.id=\"grid.412125.1\"\n",
      "            return research_orgs limit 11\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>acronym</th>\n",
       "      <th>city_name</th>\n",
       "      <th>count</th>\n",
       "      <th>country_name</th>\n",
       "      <th>id</th>\n",
       "      <th>latitude</th>\n",
       "      <th>linkout</th>\n",
       "      <th>longitude</th>\n",
       "      <th>name</th>\n",
       "      <th>state_name</th>\n",
       "      <th>types</th>\n",
       "      <th>id_from</th>\n",
       "      <th>level</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>KAU</td>\n",
       "      <td>Jeddah</td>\n",
       "      <td>1069</td>\n",
       "      <td>Saudi Arabia</td>\n",
       "      <td>grid.412125.1</td>\n",
       "      <td>21.493889</td>\n",
       "      <td>[http://www.kau.edu.sa/home_english.aspx]</td>\n",
       "      <td>39.250280</td>\n",
       "      <td>King Abdulaziz University</td>\n",
       "      <td>NaN</td>\n",
       "      <td>[Education]</td>\n",
       "      <td>grid.412125.1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>MIT</td>\n",
       "      <td>Cambridge</td>\n",
       "      <td>53</td>\n",
       "      <td>United States</td>\n",
       "      <td>grid.116068.8</td>\n",
       "      <td>42.359820</td>\n",
       "      <td>[http://web.mit.edu/]</td>\n",
       "      <td>-71.092110</td>\n",
       "      <td>Massachusetts Institute of Technology</td>\n",
       "      <td>Massachusetts</td>\n",
       "      <td>[Education]</td>\n",
       "      <td>grid.412125.1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Cambridge</td>\n",
       "      <td>49</td>\n",
       "      <td>United States</td>\n",
       "      <td>grid.38142.3c</td>\n",
       "      <td>42.377052</td>\n",
       "      <td>[http://www.harvard.edu/]</td>\n",
       "      <td>-71.116650</td>\n",
       "      <td>Harvard University</td>\n",
       "      <td>Massachusetts</td>\n",
       "      <td>[Education]</td>\n",
       "      <td>grid.412125.1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>NU</td>\n",
       "      <td>Boston</td>\n",
       "      <td>46</td>\n",
       "      <td>United States</td>\n",
       "      <td>grid.261112.7</td>\n",
       "      <td>42.339830</td>\n",
       "      <td>[http://www.northeastern.edu/]</td>\n",
       "      <td>-71.089180</td>\n",
       "      <td>Northeastern University</td>\n",
       "      <td>Massachusetts</td>\n",
       "      <td>[Education]</td>\n",
       "      <td>grid.412125.1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>AMU</td>\n",
       "      <td>Aligarh</td>\n",
       "      <td>39</td>\n",
       "      <td>India</td>\n",
       "      <td>grid.411340.3</td>\n",
       "      <td>27.917370</td>\n",
       "      <td>[http://www.amu.ac.in/]</td>\n",
       "      <td>78.077850</td>\n",
       "      <td>Aligarh Muslim University</td>\n",
       "      <td>Uttar Pradesh</td>\n",
       "      <td>[Education]</td>\n",
       "      <td>grid.412125.1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>QAU</td>\n",
       "      <td>Islamabad</td>\n",
       "      <td>35</td>\n",
       "      <td>Pakistan</td>\n",
       "      <td>grid.412621.2</td>\n",
       "      <td>33.747223</td>\n",
       "      <td>[http://www.qau.edu.pk/]</td>\n",
       "      <td>73.138885</td>\n",
       "      <td>Quaid-i-Azam University</td>\n",
       "      <td>NaN</td>\n",
       "      <td>[Education]</td>\n",
       "      <td>grid.412125.1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>KSU</td>\n",
       "      <td>Riyadh</td>\n",
       "      <td>35</td>\n",
       "      <td>Saudi Arabia</td>\n",
       "      <td>grid.56302.32</td>\n",
       "      <td>24.723982</td>\n",
       "      <td>[http://ksu.edu.sa/en/]</td>\n",
       "      <td>46.645840</td>\n",
       "      <td>King Saud University</td>\n",
       "      <td>NaN</td>\n",
       "      <td>[Education]</td>\n",
       "      <td>grid.412125.1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Ismailia</td>\n",
       "      <td>34</td>\n",
       "      <td>Egypt</td>\n",
       "      <td>grid.33003.33</td>\n",
       "      <td>30.622778</td>\n",
       "      <td>[http://scuegypt.edu.eg/ar/]</td>\n",
       "      <td>32.275000</td>\n",
       "      <td>Suez Canal University</td>\n",
       "      <td>NaN</td>\n",
       "      <td>[Education]</td>\n",
       "      <td>grid.412125.1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Elâzığ</td>\n",
       "      <td>33</td>\n",
       "      <td>Turkey</td>\n",
       "      <td>grid.411320.5</td>\n",
       "      <td>38.679900</td>\n",
       "      <td>[https://yeni.firat.edu.tr/]</td>\n",
       "      <td>39.202843</td>\n",
       "      <td>Fırat University</td>\n",
       "      <td>NaN</td>\n",
       "      <td>[Education]</td>\n",
       "      <td>grid.412125.1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>NaN</td>\n",
       "      <td>New Delhi</td>\n",
       "      <td>33</td>\n",
       "      <td>India</td>\n",
       "      <td>grid.411818.5</td>\n",
       "      <td>28.561607</td>\n",
       "      <td>[http://jmi.ac.in/]</td>\n",
       "      <td>77.280150</td>\n",
       "      <td>National Islamic University</td>\n",
       "      <td>NaN</td>\n",
       "      <td>[Education]</td>\n",
       "      <td>grid.412125.1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>KKU</td>\n",
       "      <td>Abhā</td>\n",
       "      <td>31</td>\n",
       "      <td>Saudi Arabia</td>\n",
       "      <td>grid.412144.6</td>\n",
       "      <td>18.249500</td>\n",
       "      <td>[http://www.kku.edu.sa/]</td>\n",
       "      <td>42.559700</td>\n",
       "      <td>King Khalid University</td>\n",
       "      <td>NaN</td>\n",
       "      <td>[Education]</td>\n",
       "      <td>grid.412125.1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   acronym  city_name  count   country_name             id   latitude  \\\n",
       "0      KAU     Jeddah   1069   Saudi Arabia  grid.412125.1  21.493889   \n",
       "1      MIT  Cambridge     53  United States  grid.116068.8  42.359820   \n",
       "2      NaN  Cambridge     49  United States  grid.38142.3c  42.377052   \n",
       "3       NU     Boston     46  United States  grid.261112.7  42.339830   \n",
       "4      AMU    Aligarh     39          India  grid.411340.3  27.917370   \n",
       "5      QAU  Islamabad     35       Pakistan  grid.412621.2  33.747223   \n",
       "6      KSU     Riyadh     35   Saudi Arabia  grid.56302.32  24.723982   \n",
       "7      NaN   Ismailia     34          Egypt  grid.33003.33  30.622778   \n",
       "8      NaN     Elâzığ     33         Turkey  grid.411320.5  38.679900   \n",
       "9      NaN  New Delhi     33          India  grid.411818.5  28.561607   \n",
       "10     KKU       Abhā     31   Saudi Arabia  grid.412144.6  18.249500   \n",
       "\n",
       "                                      linkout  longitude  \\\n",
       "0   [http://www.kau.edu.sa/home_english.aspx]  39.250280   \n",
       "1                       [http://web.mit.edu/] -71.092110   \n",
       "2                   [http://www.harvard.edu/] -71.116650   \n",
       "3              [http://www.northeastern.edu/] -71.089180   \n",
       "4                     [http://www.amu.ac.in/]  78.077850   \n",
       "5                    [http://www.qau.edu.pk/]  73.138885   \n",
       "6                     [http://ksu.edu.sa/en/]  46.645840   \n",
       "7                [http://scuegypt.edu.eg/ar/]  32.275000   \n",
       "8                [https://yeni.firat.edu.tr/]  39.202843   \n",
       "9                         [http://jmi.ac.in/]  77.280150   \n",
       "10                   [http://www.kku.edu.sa/]  42.559700   \n",
       "\n",
       "                                     name     state_name        types  \\\n",
       "0               King Abdulaziz University            NaN  [Education]   \n",
       "1   Massachusetts Institute of Technology  Massachusetts  [Education]   \n",
       "2                      Harvard University  Massachusetts  [Education]   \n",
       "3                 Northeastern University  Massachusetts  [Education]   \n",
       "4               Aligarh Muslim University  Uttar Pradesh  [Education]   \n",
       "5                 Quaid-i-Azam University            NaN  [Education]   \n",
       "6                    King Saud University            NaN  [Education]   \n",
       "7                   Suez Canal University            NaN  [Education]   \n",
       "8                        Fırat University            NaN  [Education]   \n",
       "9             National Islamic University            NaN  [Education]   \n",
       "10                 King Khalid University            NaN  [Education]   \n",
       "\n",
       "          id_from  level  \n",
       "0   grid.412125.1      1  \n",
       "1   grid.412125.1      1  \n",
       "2   grid.412125.1      1  \n",
       "3   grid.412125.1      1  \n",
       "4   grid.412125.1      1  \n",
       "5   grid.412125.1      1  \n",
       "6   grid.412125.1      1  \n",
       "7   grid.412125.1      1  \n",
       "8   grid.412125.1      1  \n",
       "9   grid.412125.1      1  \n",
       "10  grid.412125.1      1  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "get_collaborators(GRIDID, printquery=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false"
   },
   "source": [
    "## 4. Building a network of any size \n",
    "\n",
    "What if we want to retrieve the collaborators of the collaborators? \n",
    "\n",
    "In other words, what if we want to generate a larger network, which includes the institutions linked to the collaborating institutions of King Abdulaziz University? If we think of our collaboration data as a [graph structure](https://en.wikipedia.org/wiki/Graph_(discrete_mathematics)) with nodes and edges, we can see that the `get_collaborators` function defined above is limited. That's because it allows to obtain only the objects directly linked to the 'seed' GRID. Instead, we want to run the same analysis for any GRID ID in our results, **iteratively**, so to generate an N-degrees network where N is chosen by us. \n",
    "\n",
    "To this purpose, we can set up a [recursive](https://en.wikipedia.org/wiki/Recursion_(computer_science)) function. This function essentially repeats the `get_collaborators` function as many times as needed. A few key points to note: \n",
    "* The `maxlevel` parameter determines how big our network should be (1 =  neighbours only, 2 = collaborators of neighbours,e tc..) \n",
    "* We pause 1 second after each iteration to avoid hitting the normal Analytics API quota (~30 requests per minute)\n",
    "* The function can generate lots of data! E.g. calling this function with `maxlevel=5` will lead to 10k queries! (note: you can get a rough estimate of the queries via the formula *10 to the power of maxlevel-1*. That's because 10 is the number of orgs we extract per iteration, and maxlevel is the number or iterations, minus the first one which generates no extra queries).   \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "Collapsed": "false"
   },
   "outputs": [],
   "source": [
    "def looper(seed, maxlevel=1, thislevel=1):\n",
    "    \"Recursive function for building an organization collaboration network\"\n",
    "    collaborators = get_collaborators(seed, thislevel)\n",
    "    time.sleep(1)\n",
    "    print(\"--\" * thislevel, seed, \" :: level =\", thislevel)\n",
    "    if thislevel < maxlevel:\n",
    "        gridslist = list(collaborators[collaborators['id'] != GRIDID]['id'])\n",
    "        extra = [looper(x, maxlevel, thislevel+1) for x in gridslist]\n",
    "        return collaborators.append(extra)\n",
    "    else:\n",
    "        # finally\n",
    "        return collaborators"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false"
   },
   "source": [
    "Let's try this out. \n",
    "\n",
    "We can construct a 2-degrees collaboration network starting from King Abdulaziz University. We are extracting 10 organizations per node so our network will have ~100 nodes at the end!   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "Collapsed": "false"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-- grid.412125.1  :: level = 1\n",
      "---- grid.116068.8  :: level = 2\n",
      "---- grid.38142.3c  :: level = 2\n",
      "---- grid.261112.7  :: level = 2\n",
      "---- grid.411340.3  :: level = 2\n",
      "---- grid.412621.2  :: level = 2\n",
      "---- grid.56302.32  :: level = 2\n",
      "---- grid.33003.33  :: level = 2\n",
      "---- grid.411320.5  :: level = 2\n",
      "---- grid.411818.5  :: level = 2\n",
      "---- grid.412144.6  :: level = 2\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.7/site-packages/pandas/core/frame.py:6692: FutureWarning:\n",
      "\n",
      "Sorting because non-concatenation axis is not aligned. A future version\n",
      "of pandas will change to not sort by default.\n",
      "\n",
      "To accept the future behavior, pass 'sort=False'.\n",
      "\n",
      "To retain the current behavior and silence the warning, pass 'sort=True'.\n",
      "\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id_from</th>\n",
       "      <th>id_to</th>\n",
       "      <th>level</th>\n",
       "      <th>count</th>\n",
       "      <th>name</th>\n",
       "      <th>acronym</th>\n",
       "      <th>city_name</th>\n",
       "      <th>state_name</th>\n",
       "      <th>country_name</th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "      <th>linkout</th>\n",
       "      <th>types</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>grid.412125.1</td>\n",
       "      <td>grid.412125.1</td>\n",
       "      <td>1</td>\n",
       "      <td>1069</td>\n",
       "      <td>King Abdulaziz University</td>\n",
       "      <td>KAU</td>\n",
       "      <td>Jeddah</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Saudi Arabia</td>\n",
       "      <td>21.493889</td>\n",
       "      <td>39.25028</td>\n",
       "      <td>[http://www.kau.edu.sa/home_english.aspx]</td>\n",
       "      <td>[Education]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>grid.412125.1</td>\n",
       "      <td>grid.116068.8</td>\n",
       "      <td>1</td>\n",
       "      <td>53</td>\n",
       "      <td>Massachusetts Institute of Technology</td>\n",
       "      <td>MIT</td>\n",
       "      <td>Cambridge</td>\n",
       "      <td>Massachusetts</td>\n",
       "      <td>United States</td>\n",
       "      <td>42.359820</td>\n",
       "      <td>-71.09211</td>\n",
       "      <td>[http://web.mit.edu/]</td>\n",
       "      <td>[Education]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>grid.412125.1</td>\n",
       "      <td>grid.38142.3c</td>\n",
       "      <td>1</td>\n",
       "      <td>49</td>\n",
       "      <td>Harvard University</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Cambridge</td>\n",
       "      <td>Massachusetts</td>\n",
       "      <td>United States</td>\n",
       "      <td>42.377052</td>\n",
       "      <td>-71.11665</td>\n",
       "      <td>[http://www.harvard.edu/]</td>\n",
       "      <td>[Education]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>grid.412125.1</td>\n",
       "      <td>grid.261112.7</td>\n",
       "      <td>1</td>\n",
       "      <td>46</td>\n",
       "      <td>Northeastern University</td>\n",
       "      <td>NU</td>\n",
       "      <td>Boston</td>\n",
       "      <td>Massachusetts</td>\n",
       "      <td>United States</td>\n",
       "      <td>42.339830</td>\n",
       "      <td>-71.08918</td>\n",
       "      <td>[http://www.northeastern.edu/]</td>\n",
       "      <td>[Education]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>grid.412125.1</td>\n",
       "      <td>grid.411340.3</td>\n",
       "      <td>1</td>\n",
       "      <td>39</td>\n",
       "      <td>Aligarh Muslim University</td>\n",
       "      <td>AMU</td>\n",
       "      <td>Aligarh</td>\n",
       "      <td>Uttar Pradesh</td>\n",
       "      <td>India</td>\n",
       "      <td>27.917370</td>\n",
       "      <td>78.07785</td>\n",
       "      <td>[http://www.amu.ac.in/]</td>\n",
       "      <td>[Education]</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         id_from          id_to  level  count  \\\n",
       "0  grid.412125.1  grid.412125.1      1   1069   \n",
       "1  grid.412125.1  grid.116068.8      1     53   \n",
       "2  grid.412125.1  grid.38142.3c      1     49   \n",
       "3  grid.412125.1  grid.261112.7      1     46   \n",
       "4  grid.412125.1  grid.411340.3      1     39   \n",
       "\n",
       "                                    name acronym  city_name     state_name  \\\n",
       "0              King Abdulaziz University     KAU     Jeddah            NaN   \n",
       "1  Massachusetts Institute of Technology     MIT  Cambridge  Massachusetts   \n",
       "2                     Harvard University     NaN  Cambridge  Massachusetts   \n",
       "3                Northeastern University      NU     Boston  Massachusetts   \n",
       "4              Aligarh Muslim University     AMU    Aligarh  Uttar Pradesh   \n",
       "\n",
       "    country_name   latitude  longitude  \\\n",
       "0   Saudi Arabia  21.493889   39.25028   \n",
       "1  United States  42.359820  -71.09211   \n",
       "2  United States  42.377052  -71.11665   \n",
       "3  United States  42.339830  -71.08918   \n",
       "4          India  27.917370   78.07785   \n",
       "\n",
       "                                     linkout        types  \n",
       "0  [http://www.kau.edu.sa/home_english.aspx]  [Education]  \n",
       "1                      [http://web.mit.edu/]  [Education]  \n",
       "2                  [http://www.harvard.edu/]  [Education]  \n",
       "3             [http://www.northeastern.edu/]  [Education]  \n",
       "4                    [http://www.amu.ac.in/]  [Education]  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "collaborators = looper(GRIDID, maxlevel=2)\n",
    "# change column order for readability purposes\n",
    "collaborators.rename(columns={\"id\": \"id_to\"}, inplace=True)\n",
    "collaborators = collaborators[['id_from', 'id_to', 'level', 'count', 'name', 'acronym', 'city_name', 'state_name', 'country_name', 'latitude', 'longitude', 'linkout',  'types' ]]\n",
    "collaborators.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false"
   },
   "source": [
    "## 5. Visualizing the network \n",
    "\n",
    "In order to get an overview of the network data we can build a visualization using the [pyvis](https://pyvis.readthedocs.io/en/latest/tutorial.html) library. In particular, in order to quickly identify the key players in the network, we can build a visualization where the size of the nodes is proportional to the proximity to our 'seed' organization, and the strenght of the collaboration is proportional to the size of the edges (= how many publications two orgs have in common). \n",
    "\n",
    "A custom version of pyvis is already included in [dimcli.core.extras](https://github.com/digital-science/dimcli/blob/master/dimcli/core/extras.py) and is called `NetworkViz` (note: this custom version only fixes a bug that prevents pyvis graphs to be displayed online with Google Colab). \n",
    "\n",
    "This is what the code below does:\n",
    "\n",
    "* After creating a `NetworkViz` object, we fill it in with the `add_node` and `add_edge` method. The full list of attributes for nodes and edges are described in [pyvis](https://pyvis.readthedocs.io/en/latest/tutorial.html).\n",
    "* We generate colors for the chart, using the built-in [plotly color scales](https://plot.ly/python/builtin-colorscales/). Try changing them!\n",
    "* The `repulsion` parameter is set to 300, but for bigger charts you may want to increase that..\n",
    "* Tip: by experimenting with the way node sizes/colors are generated to the underlying data, it is possible to highlight different dimensions eg *countries* or *types* of the organizations. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "Collapsed": "false"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <iframe\n",
       "            width=\"100%\"\n",
       "            height=\"800px\"\n",
       "            src=\"network_grid.412125.1.html\"\n",
       "            frameborder=\"0\"\n",
       "            allowfullscreen\n",
       "        ></iframe>\n",
       "        "
      ],
      "text/plain": [
       "<IPython.lib.display.IFrame at 0x127e6cb50>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "# load custom version of pyvis \n",
    "from dimcli.core.extras import NetworkViz\n",
    "\n",
    "# set up dataviz\n",
    "g = NetworkViz(notebook=True, width=\"100%\", height=\"800px\")\n",
    "g.toggle_hide_edges_on_drag(False)\n",
    "g.barnes_hut()\n",
    "g.repulsion(300)\n",
    "# g.show_buttons() # in html-standalone mode, this command show viz controls\n",
    "\n",
    "\n",
    "#\n",
    "# create nodes and edges\n",
    "#\n",
    "\n",
    "# remove duplicates from nodes \n",
    "nodes = collaborators.drop_duplicates(subset =\"id_to\", keep = 'first')\n",
    "# remove internal collaborations stats \n",
    "edges = collaborators[(collaborators['id_to'] != collaborators['id_from'])]\n",
    "\n",
    "# reuse plotly color palette\n",
    "palette = px.colors.diverging.Temps\n",
    "\n",
    "\n",
    "#\n",
    "# add nodes\n",
    "#\n",
    "\n",
    "for index, row in nodes.iterrows():\n",
    "    \n",
    "    # calc size based on level\n",
    "    maxsize = int(nodes['level'].max()) + 1\n",
    "    if row['id_to'] == GRIDID:\n",
    "        size = maxsize\n",
    "    else:\n",
    "        size = maxsize - row['level']\n",
    "\n",
    "    # calc color based on level\n",
    "    if row['id_to'] == GRIDID:\n",
    "        color = palette[0]\n",
    "    else:\n",
    "        color = palette[row['level'] * 2]\n",
    "\n",
    "    g.add_node(\n",
    "        n_id = row['id_to'],\n",
    "        label = row['name'],\n",
    "        title = f\"<h4>{row['name']}<br>{row['city_name']}, {row['country_name']}<br> - {row['id_to']}</h4>\",\n",
    "        value = size,\n",
    "        color = color,\n",
    "        borderWidthSelected = 5,\n",
    "        shape = \"dot\",\n",
    "    )\n",
    "\n",
    "\n",
    "# store the max value for normalization operations later\n",
    "edges_maxcount = edges['count'].max()\n",
    "\n",
    "#\n",
    "# add edges\n",
    "#\n",
    "\n",
    "for index, row in edges.iterrows():\n",
    "  g.add_edge(row['id_from'], row['id_to'], \n",
    "             value = float(row['count']) / edges_maxcount,\n",
    "             label=int(row['count']), \n",
    "             arrows=\"none\"\n",
    "            )\n",
    "\n",
    "\n",
    "# add tooltips with adjancent links info\n",
    "neighbor_map = g.get_adj_list() \n",
    "for node in g.nodes:\n",
    "    neigh = neighbor_map[node[\"id\"]]\n",
    "    labels = [nodes[nodes['id_to'] == x].iloc[0]['name'] for x in neigh]\n",
    "    node[\"title\"] += \"Links:<li>\" + \"</li><li>\".join(labels)\n",
    " \n",
    "    \n",
    "g.show(f\"network_{GRIDID}.html\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false"
   },
   "source": [
    "## 6. Conclusions\n",
    "\n",
    "In this tutorial we have demonstrated how to generate an organization 'collaborations network diagram' using the Dimensions API. Starting from a research organization, we extracted information about other collaborating organizations, based on shared publications data, a topic and a time-frame. \n",
    "\n",
    "An example of the resulting network diagram [can be seen here](http://api-sample-data.dimensions.ai/dataviz-exports/3-Organizations-Collaboration-Network/network_2_levels_grid.412125.1.html).\n",
    "\n",
    "Here's some ideas for further experimentation:\n",
    "\n",
    "* try changing the initial `publications` query so to include other parameters. The [publications API](https://docs.dimensions.ai/dsl/data-sources.html#publications) is rich so there're many ways to fine-tune your analysis\n",
    "* try increasing the number of iterations using the `maxlevel` parameter \n",
    "* try customizing the resulting network diagram, e.g. to highlight nodes and edges based on different criteria like countries or years. "
   ]
  }
 ],
 "metadata": {
  "kernel_info": {
   "name": "python3"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  },
  "nteract": {
   "version": "0.15.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
